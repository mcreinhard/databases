// Generated by CoffeeScript 1.7.1
(function() {
  var Message, Model, Promise, Room, Sequelize, User, messages, sequelize;

  Promise = require('bluebird');

  Sequelize = require('sequelize');

  sequelize = new Sequelize('chat', 'root', 'batterchalks');

  User = sequelize.define('User', {
    username: Sequelize.STRING
  });

  Room = sequelize.define('Room', {
    roomname: Sequelize.STRING
  });

  Message = sequelize.define('Message', {
    text: Sequelize.STRING
  });

  Message.belongsTo(User);

  Message.belongsTo(Room);

  Promise.all((function() {
    var _i, _len, _ref, _results;
    _ref = [User, Room, Message];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      Model = _ref[_i];
      _results.push(Model.sync());
    }
    return _results;
  })())["catch"](function(err) {
    throw err;
  });

  messages = module.exports;

  messages.add = function(message) {
    var key, _i, _len, _ref;
    _ref = ['username', 'roomname', 'text'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      if (message[key] == null) {
        message[key] = '';
      }
    }
    return User.findOrCreate({
      username: message.username
    }).then(function(user) {
      message.UserId = user.dataValues.id;
      return Room.findOrCreate({
        roomname: message.roomname
      });
    }).then(function(room) {
      var newMessage;
      message.RoomId = room.dataValues.id;
      newMessage = Message.build(message);
      return newMessage.save();
    });
  };

  messages.get = function(roomname) {
    var options;
    options = {
      attributes: ['User.username', 'Room.roomname', 'text', 'createdAt'],
      include: [User, Room],
      order: 'createdAt DESC',
      limit: 100
    };
    if (roomname != null) {
      options.where = {
        'Room.roomname': roomname
      };
    }
    return Message.findAll(options);
  };

}).call(this);

//# sourceMappingURL=messages.map
